pipeline{

  agent any
  
  parameters {
    choice(
      choices: ['homologacao' , 'producao'],
      description: '',
      name: 'ambiente')
  }
  stages {
    stage ('Set Environment') {
      steps {
        script {
          if (params.ambiente.equals('producao')){
            env.SRV01="pos01"
            env.SRV02="pos02"
            env.SRV01_IP="192.168.11.151"
            env.SRV02_IP="192.168.12.105"
          }else if (params.ambiente.equals('homologacao')){
            env.SRV01="hmlpos01"
            env.SRV02="hmlpos02"
            env.SRV01_IP="192.168.11.31"
            env.SRV02_IP="192.168.12.141"
          }
          env.CONTAINER="${env.JOB_BASE_NAME}"
          env.TZ="America/Recife"
          env.PORT="4200"
          env.URL_NPM_REPOSITORY="http://devapps.cers.com.br/nexus/repository/npm-group/"
          withCredentials([usernamePassword(credentialsId: 'healthcheck_token', usernameVariable: 'USERNAME', passwordVariable: 'PASSWD')]) {
            env.AUTH="${PASSWD}"
          }
        }
      }
    }
    /**
    stage('SonarQube analysis') {
      steps{
		withSonarQubeEnv('SonarQube') {
            sh '''sonar-scanner -Dsonar.projectKey=$JOB_BASE_NAME -Dsonar.host.url=$SONAR_URL_HOST -Dsonar.login=$SONAR_LOGIN'''
        }
      }
    }
    **/
    stage ('Build Docker and Push to registry') {
      steps {
        echo "Versionando imagem e buildando codigo"
        script {
          //configure registry
          docker.withRegistry("https://${env.REGISTRY}", 'ecr:us-east-1:AWS_ECR') {
            // build image tagged from BUILD_ID
            def customImage = docker.build("${env.JOB_BASE_NAME}:${env.BUILD_ID}")
            // push image tagged from BUILD_ID
            customImage.push()
            // push image tagged form hom
            customImage.push("hom")
            if (params.ambiente.equals('producao')){
              // push image tagged from latest
              customImage.push("latest")
            }
          }
        }
      }
    }
    stage ('Deploy') {
      steps {
        echo "Deploy nos servidores"
        sh '''
          echo $'\n'APLICA CONFIGURACOES NO LOOP DE SERVIDORES $SRV01 e $SRV02 $'\n'
          for SRV in $SRV01 $SRV02
          do
            echo $'\n'COPIA NOVO DOCKER COMPOSE NO SERVIDOR $SRV $'\n'
            tsh scp --proxy=teleport.cers.com.br:443 -i /home/ubuntu/jenkins.pem docker-compose.yaml ubuntu@$SRV:/tmp/docker-compose-$JOB_BASE_NAME.yaml
            
            echo $'\n'ATUALIZA CONTAINER NO SERVIDOR $SRV $'\n'
            tsh ssh --proxy=teleport.cers.com.br:443 -i /home/ubuntu/jenkins.pem ubuntu@$SRV \
            "#EXPORTA VARIAVEIS
            if [ $SRV = $SRV01 ]
            then
              export HOST="$SRV01_IP"
              export URLHEALTHCHECK="http://$SRV01_IP:$PORT"
            fi
            if [ $SRV = $SRV02 ]
            then
              export HOST="$SRV02_IP"
              export URLHEALTHCHECK="http://$SRV02_IP:$PORT"
            fi
            export CONTAINER=$JOB_BASE_NAME
            export PORT=$PORT
            export BUILD_ID=$BUILD_ID
            export REGISTRY=$REGISTRY
            export SRV=$SRV
            export AUTH=$AUTH
            export TZ=$TZ

            #CRIA AMBIENTE NO SERVIDOR $SRV
            sudo mkdir -p /deploy/$JOB_BASE_NAME
            sudo mv /tmp/docker-compose-$JOB_BASE_NAME.yaml /deploy/$JOB_BASE_NAME/docker-compose.yaml
            
            echo $'\n'LOGA NO REGISTRY $'\n'
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REGISTRY
            
            echo $'\n'EXIBE CONFIGURACAO A SER APLICADA NO SERVIDOR $SRV $'\n'
            docker-compose -f /deploy/$JOB_BASE_NAME/docker-compose.yaml config
            
            echo $'\n'RECRIA CONTAINERS COM ATUALIZACAO NO SERVIDOR $SRV $'\n'
            docker-compose -f /deploy/$JOB_BASE_NAME/docker-compose.yaml up -d
            "
          done
        '''
      }
    }
  }
}
